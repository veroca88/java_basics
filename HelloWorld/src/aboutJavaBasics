** Java Naming Conventions **

Package             - all lower case                            - edu.cmu.cs.cheese
Class               - start with uppercase letter               - Scanner
Method              - camelCase                                 - nextInt()
Instance variable   - camelCase                                 - firstName
Constant            - all uppercase separated by undercores     - MAX_INT

** Static vs Dynamic Typing **
* Dynamically (JavaScript & Python) Statically typed (Java)

* Dynamically
let dynamicVariable = "dog"
typeOf(dynamicVariable)
// string

dynamicVariable = 42
typeOf(dynamicVariable)
// number

* Statically
String staticVariable = "dog";
staticVariable = 42;
// error: incompatible types: int cannot be converted to String

* To declare the type of a variable or parameter
* Strings are immutables, always double quotation " "

String staticVariable = "dog";
boolean b = false

* char uses single quotation marks. The single character can be:
* a letter, digit, punctuation, or whitespace like tab ('\t')

char charVariable = 'd';

** Numbers Values
*From smallest to largest:
byte(8-bit, range between -128 to 127) NOT support fractions,
short(16-bit, range between -2^15 to 2^15 -1) NOT support fractions,
int(32-bit, range between -2^31 to 2^31 -1) NOT support fractions,
float(32-bit, range between -2^31 to 2^31 -1, takes less space but less precises) support fractions,
long NOT support fractions,
double(64-bit, takes more space but more precise) support fractions
** In Java programs is normally mostly see the use of double data type than float
* Use
float and double        -> number with a decimal point.
BigDecimal              -> currency values


** Manipulation

* Example String str = "HIMALAYAS".
* String methods in Java
 - Java Syntax                      - Description
str.charAt(3)                       - Returns the character at index 3, ('M').
str.substring(2,4)                  - Returns the characters from indexes 2 - 4, ("MAL").
str.length()                        - Returns the length of the string.
str.indexOf('A')                    - Returns the index for the first occurrence of ‘a’, (3).
str.split("delimiter")              - Splits the string into sections at each delimiter and stores the sections as elements in an array.
str.concat(string2).concat(string3)	- In Java, concat concatenates only two strings. To join multiple strings, method chaining is required.
str.trim()                          - Removes any whitespace at the beginning or end of the string.
str.toUpperCase(),str.toLowerCase() - Changes all alphabetic characters in the string to UPPERCASE or lowercase, respectively.
str.contains("text")                - Searches for the specified text within a string and returns true or false.
str.equals(otherString)             - Compares strings for equality and returns a boolean.

** Two Complement
* Binary Representation

"Steps"
Find the number in binary (positive),
Flip the bits,
Add 1

Range of -128 through 127

Example:

Find -56

56      = 0011 1000
flip    = 1100 0111 (One's Complement -56)
(+1)      0000 0001
         -----------
          1100 1000 (Two's Complement -56)

-56 = 11001000

** Mutating Information
* We define information by using data types.
* You can mutate or change information by using operators.
mathematical (+, -, \, *)
bitwise (&, |, ^) this are different from logical operator
shift (>>, >>>, <<, <<<)
relational (<, <=, >, >=, ==, instanceof, !=)
logical (&&, ||).

** Casting Data type
* The type that you want to cast to in parenthesis in front of the variable that you are converting.

long a = 10393L;
int i = (int)a;

** Upcasting vs Downcasting
* casting to a type that encompasses a larger range (upcasting) you won’t have to worry about data loss.
* to a type with a smaller range (downcasting), you can potentially lose some data depending upon the range of the type that you’re casting to.

public class Example {
    public static void main(String[] args){

        int i = 200;
        byte b = (byte)i;
        System.out.println(b);
        //output b - 56 we lose data downcasting
    }
}

** Arrays
* Fast at retrieving data
*  Anytime you create data types other than primitives, you'll use the *new* keyword

* Initializing an array
int[] nameArray = new int[5]
// 5 is the length is going to have the nameArray

* Initializing an array with values
int[] myArray = {1, 2, 3, 4, 5};

*Access to element in myArray

//output 4

*Re-assign a value to element in myArray
myArray[1] = 7

String[] myArr = {"first", "second", "third"};
for (int i = 0; i < myArr.length; i++) {
  System.out.println(myArr[i]);
}
//output first
         second
         third

** Multidimensional Arrays

1D int[] arr;
*Declare an array - literal manner
2D  int[][] arr2d = {{1,2},{3,4}};
*Declare an array - using new keyword
    int[][] arry2d = new init[1][2]

3D int[][][] arr3d;

**Boolean Operator
AND
T T - T
T F - F
F T - F
F F - F
OR return True when at least one of the operands is True.
XOR (exclusive or) return True when One and only one of the two operands is true.
XNOR (XAND exclusive and) return True when both operands have the same value.

** If, else if, else statements
*Structure
if (condition) {
...
}
else if (condition) {
...
}
else {
...
}

**Switch Statements
 *Steps
 1. Create a variable
 (Switch support  int, char, short, byte values, Strings and enums
 (which are a programmer-defined set of values) are also supported.)
 2. Define one or more cases

int num = 7;

switch (num){
    case 7: {
        System.out.println(“My favorite number is 7!”);
        break;
    }
    default:
        System.out.println(“My favorite number is not 7!”);
}

** Algorithms and Data Structure

*Pseudocode
algorithm: palindrome is
    input: string phrase
    output: true/false result

    let length = phrase.length
    let c = 0

    while (c <= length/2)
        if (phrase[c] != phrase[length-c-1)
            return false
        c = c + 1

    return true

* O(1) is faster than O(nlogn) which is faster than O(2n).

** Strings Methods

equals() :
This is the main difference between using .equals() and ==.
When comparing values of objects (Strings are objects), you should always use .equals().

length()
indexOf()
toUpperCase()
toLowerCase()
charAt(int)
equalsIgnoreCase(String)
substring(int)

** While loops

int counter = 1;
while (counter < 6) {
System.out.println(counter);
counter++;
}

**Do-While loops

*What is the difference and/or similarities between a while loop versus a do/while loop?
While loop will execute statements based on a condition.
If that condition is false to begin with then those statements will never execute.
A do-while loop, on the other hand, will execute its statements at least once

int value = 1
do {
System.out.println(value + "+" + value + "=" + (value+value));
value++;
} while(value < 11);
output 2+2=4
       3+3=6
       4+4=8
       5+5=10
       6+6=12
       7+7=14
       8+8=16
       9+9=18
       10+10=20

** For-loop
for (int i = 0; i < array.length; i++){
  //do something with array elements
}


